{"ast":null,"code":"var _jsxFileName = \"/home/freak/myCourse/L4T21/hangman-game/src/components/CharacterButtonRow.js\";\n/**\n * this component is responsible for rendering\n * a row of CharacterButton components,\n * and provides functionality for resetting the state of\n * each CharacterButton instance when a resetButton prop is received.\n */\nimport React, { Component } from 'react';\nimport CharacterButton from './CharacterButton';\n\n/**\n * This is the CharacterButtonRow component that renders\n * a row of CharacterButton components.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CharacterButtonRow extends Component {\n  /**\n   * The component initializes its state with an array of characters\n   * passed from its parent component, AlphabetForm.\n   *\n   * The component initializes an array of buttonRefs,\n   * which are used to reference the CharacterButton instances\n   * in the row.\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: this.props.characters\n    };\n    this.buttonRefs = [];\n    this.props.characters.forEach((character, index) => {\n      this.buttonRefs[index] = /*#__PURE__*/React.createRef();\n    });\n  }\n\n  /**\n   * The componentDidUpdate lifecycle method\n   * is called when the component updates,\n   * and if the resetButton prop has changed from false to true,\n   * it calls the resetButtons method.\n   */\n  componentDidUpdate(prevProps) {\n    if (this.props.resetButton && !prevProps.resetButton) {\n      this.resetButtons();\n    }\n  }\n\n  /**\n   * The resetButtons method loops through\n   * the buttonRefs array and calls the resetClickedState method\n   * on each CharacterButton instance that exists.\n   */\n  resetButtons() {\n    this.buttonRefs.forEach(buttonRef => {\n      if (buttonRef.current) {\n        buttonRef.current.resetClickedState();\n      }\n      ;\n    });\n  }\n\n  /**\n   * The component then renders each CharacterButton\n   * in the row by mapping over the characters array and\n   * passing each character, endgame, tried,\n   * and the corresponding buttonRef.\n   * The ref prop is used to assign a reference to each CharacterButton\n   * instance to its corresponding buttonRef.\n   */\n  render() {\n    const {\n      endgame,\n      tried\n    } = this.props;\n    const {\n      characters\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: characters.map((character, index) => /*#__PURE__*/_jsxDEV(CharacterButton, {\n        character: character,\n        endgame: endgame,\n        tried: tried,\n        ref: this.buttonRefs[index]\n      }, character, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default CharacterButtonRow;","map":{"version":3,"names":["React","Component","CharacterButton","jsxDEV","_jsxDEV","CharacterButtonRow","constructor","props","state","characters","buttonRefs","forEach","character","index","createRef","componentDidUpdate","prevProps","resetButton","resetButtons","buttonRef","current","resetClickedState","render","endgame","tried","children","map","ref","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/freak/myCourse/L4T21/hangman-game/src/components/CharacterButtonRow.js"],"sourcesContent":["/**\n * this component is responsible for rendering\n * a row of CharacterButton components,\n * and provides functionality for resetting the state of\n * each CharacterButton instance when a resetButton prop is received.\n */\nimport React, { Component } from 'react';\nimport CharacterButton from './CharacterButton';\n\n/**\n * This is the CharacterButtonRow component that renders\n * a row of CharacterButton components.\n */\nclass CharacterButtonRow extends Component {\n  \n  /**\n   * The component initializes its state with an array of characters\n   * passed from its parent component, AlphabetForm.\n   *\n   * The component initializes an array of buttonRefs,\n   * which are used to reference the CharacterButton instances\n   * in the row.\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: this.props.characters\n    };\n\n    this.buttonRefs = [];\n    this.props.characters.forEach((character, index) => {\n      this.buttonRefs[index] = React.createRef();\n    });\n  }\n\n  /**\n   * The componentDidUpdate lifecycle method\n   * is called when the component updates,\n   * and if the resetButton prop has changed from false to true,\n   * it calls the resetButtons method.\n   */\n  componentDidUpdate(prevProps) {\n    if (this.props.resetButton && !prevProps.resetButton) {\n      this.resetButtons();\n    }\n  }\n\n  /**\n   * The resetButtons method loops through\n   * the buttonRefs array and calls the resetClickedState method\n   * on each CharacterButton instance that exists.\n   */\n  resetButtons() {\n    this.buttonRefs.forEach((buttonRef) => {\n      if (buttonRef.current) {\n        buttonRef.current.resetClickedState();\n      };\n    });\n  }\n\n  /**\n   * The component then renders each CharacterButton\n   * in the row by mapping over the characters array and\n   * passing each character, endgame, tried,\n   * and the corresponding buttonRef.\n   * The ref prop is used to assign a reference to each CharacterButton\n   * instance to its corresponding buttonRef.\n   */\n  render() {\n    const { endgame, tried } = this.props;\n    const { characters } = this.state;\n    return (\n      <div>\n        {characters.map((character, index) => (\n          <CharacterButton\n            key={character}\n            character={character}\n            endgame={endgame}\n            tried={tried}\n            ref={this.buttonRefs[index]}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CharacterButtonRow;\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,kBAAkB,SAASJ,SAAS,CAAC;EAEzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACXC,UAAU,EAAE,IAAI,CAACF,KAAK,CAACE;IACzB,CAAC;IAED,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACH,KAAK,CAACE,UAAU,CAACE,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;MAClD,IAAI,CAACH,UAAU,CAACG,KAAK,CAAC,gBAAGb,KAAK,CAACc,SAAS,EAAE;IAC5C,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,kBAAkBA,CAACC,SAAS,EAAE;IAC5B,IAAI,IAAI,CAACT,KAAK,CAACU,WAAW,IAAI,CAACD,SAAS,CAACC,WAAW,EAAE;MACpD,IAAI,CAACC,YAAY,EAAE;IACrB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEA,YAAYA,CAAA,EAAG;IACb,IAAI,CAACR,UAAU,CAACC,OAAO,CAAEQ,SAAS,IAAK;MACrC,IAAIA,SAAS,CAACC,OAAO,EAAE;QACrBD,SAAS,CAACC,OAAO,CAACC,iBAAiB,EAAE;MACvC;MAAC;IACH,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC,OAAO;MAAEC;IAAM,CAAC,GAAG,IAAI,CAACjB,KAAK;IACrC,MAAM;MAAEE;IAAW,CAAC,GAAG,IAAI,CAACD,KAAK;IACjC,oBACEJ,OAAA;MAAAqB,QAAA,EACGhB,UAAU,CAACiB,GAAG,CAAC,CAACd,SAAS,EAAEC,KAAK,kBAC/BT,OAAA,CAACF,eAAe;QAEdU,SAAS,EAAEA,SAAU;QACrBW,OAAO,EAAEA,OAAQ;QACjBC,KAAK,EAAEA,KAAM;QACbG,GAAG,EAAE,IAAI,CAACjB,UAAU,CAACG,KAAK;MAAE,GAJvBD,SAAS;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAMjB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAEV;AACF;AAEA,eAAe1B,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}