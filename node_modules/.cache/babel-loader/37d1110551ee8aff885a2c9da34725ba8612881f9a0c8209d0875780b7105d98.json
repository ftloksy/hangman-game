{"ast":null,"code":"var _jsxFileName = \"/home/freak/myCourse/L4T21/hangman-game/src/components/HangmanGame.js\";\n/* Import React and necessary components from react-router-dom library */\nimport React, { Component } from \"react\";\n\n/* Import custom components */\nimport Hangman from \"./Hangman\";\nimport AlphabetForm from \"./AlphabetForm\";\nimport fs from '../assets/dictionary.txt';\nimport ArrayDisplay from './ArrayDisplay';\nimport RestartGame from './RestartGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass HangmanGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Setting the initial state of the component\n      // step indicates the number of incorrect guesses made by the player\n      step: 0,\n      /**\n       * wordObj is an array of objects,\n       * each containing a character and a boolean indicating\n       * whether the player has guessed the character or not\n       */\n      wordObj: {},\n      /**\n       * winOrLost is a string indicating whether\n       * the player has won or lost the game\n       */\n      winOrLost: \"\",\n      // end is a boolean indicating whether the game has ended or not\n      end: false,\n      /**\n       * triedCharacters is an array of characters that\n       * the player has guessed already\n       */\n      triedCharacters: [],\n      /**\n       * restartGame is a boolean indicating\n       * whether the game is being restarted or not\n       */\n      restartGame: false\n    };\n    this.handleCharacterClick = this.handleCharacterClick.bind(this);\n    this.handleRestartGame = this.handleRestartGame.bind(this);\n  }\n  componentDidMount() {\n    // Start Game from easy level.\n    let randomRange = Math.floor(Math.random() * 2);\n\n    // Call getAWordFromDictionary() method with word 3 + 0 or 3 + 1, easy. \n    this.getAWordFromDictionary(3 + randomRange);\n  }\n\n  // Method to update the state's wordObj asynchronously\n  async updateWordObj(obj) {\n    await this.setState({\n      wordObj: obj\n    });\n  }\n\n  // Method to update the state's end asynchronously\n  async updateEndGame(t) {\n    await this.setState({\n      end: t\n    });\n  }\n\n  // Method to update the state's winOrLost asynchronously\n  async updateWinOrLost(msg) {\n    await this.setState({\n      winOrLost: msg\n    });\n  }\n\n  // Method to update the state's triedCharacters asynchronously\n  async updateTriedCharacters(chars) {\n    await this.setState({\n      triedCharacters: chars\n    });\n  }\n\n  /**\n   * The handleCharacterClick function takes a char parameter\n   * and is called when the user clicks on a letter button.\n   * The function first checks whether the clicked character\n   * has already been tried and if the game has not yet ended.\n   *\n   * If the character has not been tried and the game is still ongoing,\n   * the function iterates through the wordObj array to check\n   * if the clicked character matches any character in the array.\n   * If a match is found,\n   * the corresponding found property of\n   * the character object is set to true,\n   * indicating that the character has been correctly guessed.\n   * If no match is found, the game's step count is incremented.\n   *\n   * The function then updates the triedCharacters array,\n   * which tracks the characters that have already been tried.\n   * It also calls the updateWordObj function to update\n   * the wordObj state with the modified wordObj array,\n   * and the updateTriedCharacters function\n   * to update the triedCharacters state with the modified\n   * triedCharacters array.\n   * The reSetRestartGame function is called\n   * to reset the restartGame state to false.\n   * Finally, the winOrLost function is called\n   * to check whether the game has ended and update the state\n   * with the appropriate message.\n   *\n   * If the clicked character has already been tried\n   * or the game has ended, the function simply returns. \n   */\n  handleCharacterClick(char) {\n    let chars = this.state.triedCharacters;\n    if (chars.indexOf(char) === -1 && !this.state.end) {\n      let foundOne = false;\n      let wordObj = this.state.wordObj;\n      for (let i = 0; i < wordObj.length; i++) {\n        if (char === wordObj[i].character) {\n          wordObj[i].found = true;\n          foundOne = true;\n        }\n      }\n      if (!foundOne) {\n        this.setState(prevState => ({\n          step: prevState.step + 1\n        }));\n      }\n      chars.push(char);\n      this.updateWordObj(wordObj);\n      this.updateTriedCharacters(chars);\n      this.reSetRestartGame();\n      this.winOrLost();\n    }\n    return;\n  }\n\n  /**\n   * This is the handleRestartGame function,\n   * which is an asynchronous function that is triggered\n   * when the user clicks the restart button.\n   * The function resets the game state and fetches a new word\n   * from the dictionary API with parameter level.\n   *\n   * Here are the steps performed by this function:\n   *\n   * It receives an event object as a parameter,\n   * which is used to prevent the default behavior of the form submission.\n   * It calls the setState method to update the state of the game. \n   */\n  async handleRestartGame(event, level) {\n    event.preventDefault();\n    await this.setState({\n      step: 0,\n      wordObj: {},\n      winOrLost: \"\",\n      end: false,\n      triedCharacters: [],\n      restartGame: true\n    });\n    let randomRange = Math.floor(Math.random() * 2);\n    this.getAWordFromDictionary(3 + level + randomRange);\n  }\n  async reSetRestartGame() {\n    await this.setState({\n      restartGame: false\n    });\n  }\n\n  // Follow the wordObj to return game answer.\n  getAnswer() {\n    let answerWord = \"\";\n    let wordObj = this.state.wordObj;\n    for (let i = 0; i < wordObj.length; i++) {\n      answerWord += wordObj[i].character;\n    }\n    return answerWord;\n  }\n\n  /**\n   * This is a function called winOrLost that determines\n   * whether the player has won or lost the game.\n   *\n   * The function first initializes a variable called allRight to true.\n   * It then gets the wordObj array from the game's state,\n   * which contains objects representing each character\n   * in the word being guessed,\n   * along with a boolean value indicating whether\n   * that character has been correctly guessed.\n   *\n   * The function then loops through the wordObj array,\n   * setting allRight to false\n   * if it encounters a character object with a found value of false.\n   *\n   * If allRight is still true after the loop,\n   * it means that all characters have been correctly guessed.\n   * If the length of wordObj is greater than 1 and\n   * step (the number of incorrect guesses made by the player) is less than 6,\n   * the player wins the game.\n   * The function then calls updateEndGame to set the game's end state to true,\n   * and updateWinOrLost to display the message \"Your Win\".\n   * \n   * If step is greater than or equal to 6,\n   * the player has made too many incorrect guesses and has lost the game.\n   * The function sets end to true and displays the message \"Your Lost\"\n   * and game's answer.\n   *\n   * If neither of these conditions are met, the function returns null,\n   * indicating that the game is still ongoing.\n   */\n  winOrLost() {\n    let allRight = true;\n    const wordObj = this.state.wordObj;\n    for (let i = 0; i < wordObj.length; i++) {\n      if (!wordObj[i].found) {\n        allRight = false;\n      }\n    }\n    if (wordObj.length > 1 && allRight && this.state.step < 6) {\n      this.updateEndGame(true);\n      this.updateWinOrLost(\"Your Win\");\n    } else if (this.state.step >= 6) {\n      this.updateEndGame(true);\n      this.updateWinOrLost(\"Your Lost, The answer is \" + this.getAnswer() + \".\");\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * This function uses the fetch API to retrieve a file\n   * from the local file system,\n   * then processes the contents of the file to extract words\n   * of a given length.\n   *\n   * The function takes a single argument wordLength,\n   * which is the length of the words to extract from the file.\n   *\n   * The fetch call is made to a file identified by the variable fs.\n   * The response from this fetch call is then converted to text using\n   * the .text() method,\n   * which returns a promise that resolves to a string\n   * containing the contents of the file.\n   *\n   * The function then processes the contents of\n   * the file by splitting it into an array of lines,\n   * and iterating through each line.\n   * When it encounters a line containing the text \"START\",\n   * it sets a flag isStartTriggered to true,\n   * indicating that it should start processing words\n   * from that point onward.\n   * If the length of the current line matches the wordLength argument,\n   * and isStartTriggered is true,\n   * then the line is added to an array arr of words of the desired length.\n   *\n   * Finally, the function returns the array arr containing\n   * all words of the desired length found in the file.\n   */\n  getAWordFromDictionary(wordLength) {\n    fetch(fs).then(r => r.text()).then(text => {\n      const arr = [];\n      let isStartTriggered = false;\n      const lines = text.split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].replace(/\\r?\\n|\\r/g, '');\n        if (isStartTriggered) {\n          if (line.length === wordLength) {\n            arr.push(line);\n          }\n          ;\n        }\n        if (line === 'START') {\n          isStartTriggered = true;\n        }\n      }\n      return arr;\n    }).then(arr => {\n      const gameArray = [];\n      const randomIndex = Math.floor(Math.random() * arr.length);\n      const choice = arr[randomIndex];\n      for (const char of choice) {\n        gameArray.push({\n          found: false,\n          character: char\n        });\n      }\n      this.updateWordObj(gameArray);\n    });\n  }\n\n  /**\n   * This is the render function of the App component.\n   * It returns a JSX template that defines the layout of the Hangman game.\n   */\n  render() {\n    const {\n      step\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*#__PURE__*/_jsxDEV(ArrayDisplay, {\n          array: this.state.wordObj\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.winOrLost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Hangman, {\n        step: step\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AlphabetForm, {\n        onSubmit: this.handleCharacterClick,\n        endgame: this.state.end,\n        tried: this.state.triedCharacters,\n        resetButton: this.state.restartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RestartGame, {\n        onRestartGame: this.handleRestartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default HangmanGame;","map":{"version":3,"names":["React","Component","Hangman","AlphabetForm","fs","ArrayDisplay","RestartGame","jsxDEV","_jsxDEV","HangmanGame","constructor","props","state","step","wordObj","winOrLost","end","triedCharacters","restartGame","handleCharacterClick","bind","handleRestartGame","componentDidMount","randomRange","Math","floor","random","getAWordFromDictionary","updateWordObj","obj","setState","updateEndGame","t","updateWinOrLost","msg","updateTriedCharacters","chars","char","indexOf","foundOne","i","length","character","found","prevState","push","reSetRestartGame","event","level","preventDefault","getAnswer","answerWord","allRight","wordLength","fetch","then","r","text","arr","isStartTriggered","lines","split","line","replace","gameArray","randomIndex","choice","render","id","children","array","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","endgame","tried","resetButton","onRestartGame"],"sources":["/home/freak/myCourse/L4T21/hangman-game/src/components/HangmanGame.js"],"sourcesContent":["/* Import React and necessary components from react-router-dom library */\nimport React, { Component } from \"react\";\n\n/* Import custom components */\nimport Hangman from \"./Hangman\";\nimport AlphabetForm from \"./AlphabetForm\";\nimport fs from '../assets/dictionary.txt';\nimport ArrayDisplay from './ArrayDisplay';\nimport RestartGame from './RestartGame';\n\nclass HangmanGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { // Setting the initial state of the component\n      // step indicates the number of incorrect guesses made by the player\n      step: 0, \n\n      /**\n       * wordObj is an array of objects,\n       * each containing a character and a boolean indicating\n       * whether the player has guessed the character or not\n       */\n      wordObj: {},\n\n      /**\n       * winOrLost is a string indicating whether\n       * the player has won or lost the game\n       */\n      winOrLost: \"\",\n\n      // end is a boolean indicating whether the game has ended or not\n      end: false,\n\n      /**\n       * triedCharacters is an array of characters that\n       * the player has guessed already\n       */\n      triedCharacters: [],\n\n      /**\n       * restartGame is a boolean indicating\n       * whether the game is being restarted or not\n       */\n      restartGame: false,\n    };\n    this.handleCharacterClick = this.handleCharacterClick.bind(this);\n    this.handleRestartGame = this.handleRestartGame.bind(this);\n  }\n\n  componentDidMount() {\n    // Start Game from easy level.\n    let randomRange = Math.floor(Math.random() * 2);\n\n    // Call getAWordFromDictionary() method with word 3 + 0 or 3 + 1, easy. \n    this.getAWordFromDictionary(3 + randomRange);\n  }\n\n  // Method to update the state's wordObj asynchronously\n  async updateWordObj(obj){ \n    await this.setState({wordObj: obj});\n  }\n\n  // Method to update the state's end asynchronously\n  async updateEndGame(t){\n    await this.setState({end: t});\n  }\n\n  // Method to update the state's winOrLost asynchronously\n  async updateWinOrLost(msg){\n    await this.setState({winOrLost: msg});\n  }\n\n  // Method to update the state's triedCharacters asynchronously\n  async updateTriedCharacters(chars) {\n    await this.setState({triedCharacters: chars});\n  }\n\n  /**\n   * The handleCharacterClick function takes a char parameter\n   * and is called when the user clicks on a letter button.\n   * The function first checks whether the clicked character\n   * has already been tried and if the game has not yet ended.\n   *\n   * If the character has not been tried and the game is still ongoing,\n   * the function iterates through the wordObj array to check\n   * if the clicked character matches any character in the array.\n   * If a match is found,\n   * the corresponding found property of\n   * the character object is set to true,\n   * indicating that the character has been correctly guessed.\n   * If no match is found, the game's step count is incremented.\n   *\n   * The function then updates the triedCharacters array,\n   * which tracks the characters that have already been tried.\n   * It also calls the updateWordObj function to update\n   * the wordObj state with the modified wordObj array,\n   * and the updateTriedCharacters function\n   * to update the triedCharacters state with the modified\n   * triedCharacters array.\n   * The reSetRestartGame function is called\n   * to reset the restartGame state to false.\n   * Finally, the winOrLost function is called\n   * to check whether the game has ended and update the state\n   * with the appropriate message.\n   *\n   * If the clicked character has already been tried\n   * or the game has ended, the function simply returns. \n   */\n  handleCharacterClick(char) {\n    let chars = this.state.triedCharacters;\n    if (chars.indexOf(char) === -1 && !this.state.end) {\n\t    let foundOne = false;\n\t    let wordObj = this.state.wordObj;\n\t    for (let i = 0; i < wordObj.length ; i ++) {\n\t      if (char === wordObj[i].character) {\n\t        wordObj[i].found = true;\n\t        foundOne = true;\n\t      }\n\t    }\n\t    if (!foundOne) {\n\t      this.setState((prevState) => ({ step: prevState.step + 1 }));\n\t    }\n      chars.push(char);\n\t    this.updateWordObj(wordObj);\n      this.updateTriedCharacters(chars);\n      this.reSetRestartGame();\n      this.winOrLost();\n    }\n    return ;\n  }\n\n  /**\n   * This is the handleRestartGame function,\n   * which is an asynchronous function that is triggered\n   * when the user clicks the restart button.\n   * The function resets the game state and fetches a new word\n   * from the dictionary API with parameter level.\n   *\n   * Here are the steps performed by this function:\n   *\n   * It receives an event object as a parameter,\n   * which is used to prevent the default behavior of the form submission.\n   * It calls the setState method to update the state of the game. \n   */\n  async handleRestartGame(event, level) {\n    event.preventDefault();\n    await this.setState({\n      step: 0,\n      wordObj: {},\n      winOrLost: \"\",\n      end: false,\n      triedCharacters: [],\n      restartGame: true,\n    });\n    let randomRange = Math.floor(Math.random() * 2);\n    this.getAWordFromDictionary(3 + level + randomRange);\n  }\n\n  async reSetRestartGame() {\n    await this.setState({ restartGame: false });\n  }\n\n  // Follow the wordObj to return game answer.\n  getAnswer() {\n    let answerWord = \"\";\n    let wordObj = this.state.wordObj;\n    for (let i = 0; i < wordObj.length ; i ++) {\n       answerWord += wordObj[i].character;\n    }\n    return answerWord;\n  }\n\n  /**\n   * This is a function called winOrLost that determines\n   * whether the player has won or lost the game.\n   *\n   * The function first initializes a variable called allRight to true.\n   * It then gets the wordObj array from the game's state,\n   * which contains objects representing each character\n   * in the word being guessed,\n   * along with a boolean value indicating whether\n   * that character has been correctly guessed.\n   *\n   * The function then loops through the wordObj array,\n   * setting allRight to false\n   * if it encounters a character object with a found value of false.\n   *\n   * If allRight is still true after the loop,\n   * it means that all characters have been correctly guessed.\n   * If the length of wordObj is greater than 1 and\n   * step (the number of incorrect guesses made by the player) is less than 6,\n   * the player wins the game.\n   * The function then calls updateEndGame to set the game's end state to true,\n   * and updateWinOrLost to display the message \"Your Win\".\n   * \n   * If step is greater than or equal to 6,\n   * the player has made too many incorrect guesses and has lost the game.\n   * The function sets end to true and displays the message \"Your Lost\"\n   * and game's answer.\n   *\n   * If neither of these conditions are met, the function returns null,\n   * indicating that the game is still ongoing.\n   */\n  winOrLost() {\n    let allRight = true;\n    const wordObj = this.state.wordObj;\n    for (let i = 0; i < wordObj.length ; i ++) {\n      if (!wordObj[i].found) {\n        allRight = false;\n      }\n    }\n    if ( wordObj.length > 1 && allRight && this.state.step < 6) {\n      this.updateEndGame(true);\n      this.updateWinOrLost(\"Your Win\")\n    } else if ( this.state.step >= 6 ) {\n      this.updateEndGame(true);\n      this.updateWinOrLost(\"Your Lost, The answer is \" + this.getAnswer() + \".\")\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * This function uses the fetch API to retrieve a file\n   * from the local file system,\n   * then processes the contents of the file to extract words\n   * of a given length.\n   *\n   * The function takes a single argument wordLength,\n   * which is the length of the words to extract from the file.\n   *\n   * The fetch call is made to a file identified by the variable fs.\n   * The response from this fetch call is then converted to text using\n   * the .text() method,\n   * which returns a promise that resolves to a string\n   * containing the contents of the file.\n   *\n   * The function then processes the contents of\n   * the file by splitting it into an array of lines,\n   * and iterating through each line.\n   * When it encounters a line containing the text \"START\",\n   * it sets a flag isStartTriggered to true,\n   * indicating that it should start processing words\n   * from that point onward.\n   * If the length of the current line matches the wordLength argument,\n   * and isStartTriggered is true,\n   * then the line is added to an array arr of words of the desired length.\n   *\n   * Finally, the function returns the array arr containing\n   * all words of the desired length found in the file.\n   */\n  getAWordFromDictionary(wordLength) {\n    fetch(fs)\n      .then(r => r.text())\n      .then(text => {\n        const arr = [];\n        let isStartTriggered = false;\n        const lines = text.split('\\n');\n        for (let i = 0; i < lines.length; i++) {\n          const line = lines[i].replace(/\\r?\\n|\\r/g, '');\n          if (isStartTriggered) {\n            if ( line.length === wordLength ) {\n              arr.push(line);\n            };\n          }\n          if (line === 'START') {\n            isStartTriggered = true;\n          }\n        }\n        return arr;\n      })\n      .then(arr => {\n        const gameArray = [];\n        const randomIndex = Math.floor(Math.random() * arr.length);\n        const choice = arr[randomIndex];\n        for (const char of choice) {\n          gameArray.push({ found: false , character: char });\n        }\n        this.updateWordObj(gameArray);\n      })\n  }\n\n  /**\n   * This is the render function of the App component.\n   * It returns a JSX template that defines the layout of the Hangman game.\n   */\n  render() {\n    \n    const {step} = this.state ;\n\n    return (\n      <div id=\"game\">\n        <h1><ArrayDisplay array={this.state.wordObj} /></h1>\n        <h1>{this.state.winOrLost}</h1>\n        <Hangman step={step} />\n        <AlphabetForm \n          onSubmit={this.handleCharacterClick} \n          endgame={this.state.end} \n          tried={this.state.triedCharacters}\n          resetButton={this.state.restartGame}\n          />\n        <RestartGame onRestartGame={this.handleRestartGame}/>\n      </div>\n    );\n  }\n}\n\nexport default HangmanGame;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}